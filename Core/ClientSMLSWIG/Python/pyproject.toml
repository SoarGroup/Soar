[project]
name = "soar-sml"
description = "Raw SML Bindings to the Soar Cognitive Architecture"
dynamic = ["version"]
license = "BSD"
maintainers = [
    { name = "Nathan Glenn", email = "garfieldnate@gmail.com" },
    { name = "Center for Integrated Cognition" }
]
authors = [
    { name = "John E. Laird" },
    { name = "Allen Newell" },
    { name = "Paul Rosenbloom" },

    { name = "A. Deschamps" },
    { name = "A. Mininger" },
    { name = "A. Nickels" },
    { name = "A. Nuxoll" },
    { name = "A. Turner" },
    { name = "B. Stearns" },
    { name = "C. Dettmering" },
    { name = "D. Pearson" },
    { name = "D. Ray" },
    { name = "I. Hines" },
    { name = "J. Boggs" },
    { name = "J. Crossman" },
    { name = "J. Kirk" },
    { name = "J. Li" },
    { name = "J. Voigt" },
    { name = "J. Xu" },
    { name = "K. Coulter" },
    { name = "L. Goeddel" },
    { name = "M. Assanie" },
    { name = "M. Bloch" },
    { name = "M. Lanting" },
    { name = "M. Schmidt" },
    { name = "M. Tinkerhess" },
    { name = "N. Derbinsky" },
    { name = "N. Glenn" },
    { name = "N. Gorski" },
    { name = "N. Timpko" },
    { name = "R. Marinier" },
    { name = "R. Wray" },
    { name = "S. Jones" },
    { name = "S. Lathrop" },
    { name = "S. Mohan" },
    { name = "S. Nason" },
    { name = "S. Wallace" },
    { name = "S. Wintermute" },
    { name = "Y. Wang" },
]
readme = "README.md"
requires-python = ">=3.8"
dependencies = []
keywords = ["soar", "sml", "cog-arch", "cognitive architecture", "cognitive", "soar-sml", "ai"]
classifiers = [
    "Programming Language :: Python :: 3",
]

[project.urls]
Homepage = "https://soar.eecs.umich.edu/"
Repository = "https://github.com/SoarGroup/Soar"

[project.optional-dependencies]
compat = ["soar-compat"]

[build-system]
requires = [
    # Enscons provides an interface with scons, allowing it to be puppetted by cibuildwheel,
    # and other python build/install frontends (such as pip itself).
    #
    # We use a forked version of enscons to add python 3.12 support.
    "enscons @ git+https://github.com/ShadowJonathan/enscons-soar@7d6f4ca",

    # Required sub-dependencies of enscons.
    "toml>=0.1",
    "wheel",
    "versioningit",
    "scons==4.4.0"
]
build-backend = "enscons.api"

[tool.versioningit]
# https://versioningit.readthedocs.io/en/stable/configuration.html#the-tool-versioningit-next-version-subtable
next-version = "smallest"

[tool.versioningit.format]
# For "distance" (development releases) we cannot use the local identifier, as pypi does not accept those.
# Instead, we encode the distance in .dev, and the build time in a 4th version component.
distance = "{next_version}.{committer_date:%Y%m%d%H%M}.dev{distance}"

dirty = "{base_version}+dirty{build_date:%Y%m%d.%H%M}"

distance-dirty = "{next_version}.dev{distance}+{vcs}{rev}.{branch}.dirty{build_date:%Y%m%d.%H%M}"

[tool.versioningit.tag2version]
rmprefix = "releases/"

# Optional regexes to extract a full version from git tags
# regex = "\\d+\\.\\d+\\.\\d+"
# regex = "\\d[A-Za-z0-9_.!+\\-]+"

[tool.enscons]
# scons can only properly build when chdir'd to the right directory.
#
# Here we specify which relative directory enscons needs to chdir into to get scons to properly build.
#
# In SConstruct we have a line referring back to this directory, for enscons to properly grab the right metadata.
build-from = "../../../"

[tool.cibuildwheel]
# We increase verbosity in the CI, so that tracking down problems is easier.
build-verbosity = 3
skip = [
    # Skip PyPy: Build works, but does not properly work at runtime.
    "pp*",
    # Skip 32-bit Windows: scons does not properly build 32-bit version,
    #  and linkage problems occur.
    "*-win32",
    # Skip MUSL (as opposed to GLIB) linux, due to unknown concurrency symbols.
    "*-musllinux_*",
    # Cibuildwheel cannot build for Python 3.8 on Apple Silicon, and just creates an x86 wheel there,
    # which would be a duplicate with the x86 runner.
    "cp38-macosx_arm64"
]
# This test command:
#  - imports soar_sml
#  - creates the kernel
#  - creates an agent
#  - executes a command on that agent
#  - fails if the result of this command isn't as expected
# to test if Soar properly boots and runs.
test-command = """\
python -c "import soar_sml;\
k=soar_sml.Kernel.CreateKernelInNewThread();\
a=k.CreateAgent('soar');\
assert(a.ExecuteCommandLine('echo hello world').strip()=='hello world')"
"""

# Skip testing python 3.8 on ARM64. This is due to a limitation with cibuildwheel:
# https://github.com/pypa/cibuildwheel/pull/1169#issuecomment-1178727618
test-skip = "cp38-macosx_*:arm64"

[tool.cibuildwheel.linux]
# Specific instructions for cibuildwheel when running on linux:
#  - add the /project/out directory for the linker to look at.
#    - This allows it to find the soar library file, and link it.
repair-wheel-command = """\
LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/project/out auditwheel repair -w {dest_dir} {wheel}\
"""

[tool.cibuildwheel.macos]
# Specific instructions for cibuildwheel when running on macos:
#  - remove the intermediate build artifacts before every new build.
#    - this is because cibuildwheel builds for both architectures (arm64 / x86_64), and build artifacts from
#      either arch aren't properly removed, and will fail the linker (which refuses to link artifacts from
#      the wrong arch).
before-build = "rm -rf build/"
